/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SKNewPDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(SKNewPDF) 

 SKNewPDF::SKNewPDF(const char *name, const char *title, 
                        RooAbsReal& _cosThetaKpHel,
                        RooAbsReal& _phiKpHel,
                        RooAbsReal& _PHI,
                        RooAbsReal& _pol,
                        RooAbsCategory& _polState,
                        RooAbsReal& _rho000,
                        RooAbsReal& _Rerho010,
                        RooAbsReal& _rho01m1,
                        RooAbsReal& _rho111,
                        RooAbsReal& _rho100,
                        RooAbsReal& _Rerho110,
                        RooAbsReal& _rho11m1,
                        RooAbsReal& _Imrho210,
                        RooAbsReal& _Imrho21m1) :
   RooHSEventsPDF(name,title),
   cosThetaKpHel("cosThetaKpHel","cosThetaKpHel",this,_cosThetaKpHel),
   phiKpHel("phiKpHel","phiKpHel",this,_phiKpHel),
   PHI("PHI","PHI",this,_PHI),
   pol("pol","pol",this,_pol),
   polState("polState","polState",this,_polState),
   rho000("rho000","rho000",this,_rho000),
   Rerho010("Rerho010","Rerho010",this,_Rerho010),
   rho01m1("rho01m1","rho01m1",this,_rho01m1),
   rho111("rho111","rho111",this,_rho111),
   rho100("rho100","rho100",this,_rho100),
   Rerho110("Rerho110","Rerho110",this,_Rerho110),
   rho11m1("rho11m1","rho11m1",this,_rho11m1),
   Imrho210("Imrho210","Imrho210",this,_Imrho210),
   Imrho21m1("Imrho21m1","Imrho21m1",this,_Imrho21m1)
 { 
   MakeSets();
   cosThetaKpHel.SetName(_cosThetaKpHel.GetName());
   phiKpHel.SetName(_phiKpHel.GetName());
   PHI.SetName(_PHI.GetName());
   pol.SetName(_pol.GetName());
   polState.SetName(_polState.GetName());
   rho000.SetName(_rho000.GetName());
   Rerho010.SetName(_Rerho010.GetName());
   rho01m1.SetName(_rho01m1.GetName());
   rho111.SetName(_rho111.GetName());
   rho100.SetName(_rho100.GetName());
   Rerho110.SetName(_Rerho110.GetName());
   rho11m1.SetName(_rho11m1.GetName());
   Imrho210.SetName(_Imrho210.GetName());
   Imrho21m1.SetName(_Imrho21m1.GetName());
 } 


 SKNewPDF::SKNewPDF(const SKNewPDF& other, const char* name) :  
   RooHSEventsPDF(other,name),
   cosThetaKpHel("cosThetaKpHel",this,other.cosThetaKpHel),
   phiKpHel("phiKpHel",this,other.phiKpHel),
   PHI("PHI",this,other.PHI),
   pol("pol",this,other.pol),
   polState("polState",this,other.polState),
   rho000("rho000",this,other.rho000),
   Rerho010("Rerho010",this,other.Rerho010),
   rho01m1("rho01m1",this,other.rho01m1),
   rho111("rho111",this,other.rho111),
   rho100("rho100",this,other.rho100),
   Rerho110("Rerho110",this,other.Rerho110),
   rho11m1("rho11m1",this,other.rho11m1),
   Imrho210("Imrho210",this,other.Imrho210),
   Imrho21m1("Imrho21m1",this,other.Imrho21m1)
 { 
   MakeSets();
   cosThetaKpHel.SetName(other.cosThetaKpHel.GetName());
   phiKpHel.SetName(other.phiKpHel.GetName());
   PHI.SetName(other.PHI.GetName());
   pol.SetName(other.pol.GetName());
   polState.SetName(other.polState.GetName());
   rho000.SetName(other.rho000.GetName());
   Rerho010.SetName(other.Rerho010.GetName());
   rho01m1.SetName(other.rho01m1.GetName());
   rho111.SetName(other.rho111.GetName());
   rho100.SetName(other.rho100.GetName());
   Rerho110.SetName(other.Rerho110.GetName());
   rho11m1.SetName(other.rho11m1.GetName());
   Imrho210.SetName(other.Imrho210.GetName());
   Imrho21m1.SetName(other.Imrho21m1.GetName());
   if(fEvTree) SetEvTree(fEvTree, fCut);//Needs fProxSet filled first
 } 
void SKNewPDF::MakeSets(){
   fProxSet.push_back(&cosThetaKpHel);
   fProxSet.push_back(&phiKpHel);
   fProxSet.push_back(&PHI);
   fProxSet.push_back(&pol);
   fCatSet.push_back(&polState);
   fParSet.push_back(&rho000);
   fParSet.push_back(&Rerho010);
   fParSet.push_back(&rho01m1);
   fParSet.push_back(&rho111);
   fParSet.push_back(&rho100);
   fParSet.push_back(&Rerho110);
   fParSet.push_back(&rho11m1);
   fParSet.push_back(&Imrho210);
   fParSet.push_back(&Imrho21m1);
   InitSets();
}



 Double_t SKNewPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   Double_t cosSqTheta = cosThetaKpHel * cosThetaKpHel;
   Double_t sinSqTheta = 1 - cosSqTheta;
   Double_t theta = TMath::ACos(cosThetaKpHel);
   Double_t sin2theta = TMath::Sin(2.0 * theta);
   Double_t cos2theta = TMath::Cos(2.0 * theta);
   Double_t cos2phi = TMath::Cos(2.0 * phiKpHel);
   Double_t sin2phi = TMath::Sin(2.0 * phiKpHel);
   Double_t cosphi = TMath::Cos(phiKpHel);
   Double_t sinphi = TMath::Sin(phiKpHel);
   Double_t sqrt2 = TMath::Sqrt(2.0);
   Double_t cos2PHI = TMath::Cos(2.0*PHI);
   Double_t sin2PHI = TMath::Sin(2.0*PHI);
   
   Double_t W0 = (3.0 / 4.0*TMath::Pi()) * (0.5*(1.0-rho000) + 0.5*(3.0*rho000-1.0)*cosSqTheta - sqrt2*Rerho010*sin2theta*cosphi - rho01m1*sinSqTheta*cos2phi);
   Double_t W1 = (3.0 / 4.0*TMath::Pi()) * (rho111*sinSqTheta + rho100*cosSqTheta - sqrt2*Rerho110*sin2theta*cosphi - rho11m1*sinSqTheta*cos2phi);
   Double_t W2 = (3.0 / 4.0*TMath::Pi()) * (sqrt2*Imrho210*sin2theta*sinphi + Imrho21m1*sinSqTheta*sin2phi);
   
   Double_t W = W0 - polState*pol*cos2PHI*W1 - polState*pol*sin2PHI*W2;
   
   return W; 
 } 

Double_t SKNewPDF::evaluateMC() const {
// ENTER IDENTICAL EXPRESSION TO evaluate() IN TERMS OF MC VARIABLE ARGUMENTS HERE
  Double_t mccosThetaKpHel=fMCVar[0];
  Double_t mcphiKpHel=fMCVar[1];
  Double_t mcPHI=fMCVar[2];
  Double_t mcpol=fMCVar[3];
  Int_t mcpolState=fMCCat[0];
  
  // Change to this format....?
  //Double_t mccosThetaKpHel=(*vars)[fTreeEntry*fNvars+0];
  //Double_t mcphiKpHel=(*vars)[fTreeEntry*fNvars+1];
  //Double_t mcPHI=(*vars)[fTreeEntry*fNvars+2];
  //Double_t mcpol=(*vars)[fTreeEntry*fNvars+3];
  //Int_t mcpolState=(*cats)[fTreeEntry*fNcats+0];
  
   Double_t cosSqTheta = mccosThetaKpHel * mccosThetaKpHel;
   Double_t sinSqTheta = 1 - cosSqTheta;
   Double_t theta = TMath::ACos(mccosThetaKpHel);
   Double_t sin2theta = TMath::Sin(2.0 * theta);
   Double_t cos2theta = TMath::Cos(2.0 * theta);
   Double_t cos2phi = TMath::Cos(2.0 * mcphiKpHel);
   Double_t sin2phi = TMath::Sin(2.0 * mcphiKpHel);
   Double_t cosphi = TMath::Cos(mcphiKpHel);
   Double_t sinphi = TMath::Sin(mcphiKpHel);
   Double_t sqrt2 = TMath::Sqrt(2.0);
   Double_t cos2PHI = TMath::Cos(2.0*mcPHI);
   Double_t sin2PHI = TMath::Sin(2.0*mcPHI);
   
   Double_t W0 = (3.0 / 4.0*TMath::Pi()) * (0.5*(1.0-rho000) + 0.5*(3.0*rho000-1.0)*cosSqTheta - sqrt2*Rerho010*sin2theta*cosphi - rho01m1*sinSqTheta*cos2phi);
   Double_t W1 = (3.0 / 4.0*TMath::Pi()) * (rho111*sinSqTheta + rho100*cosSqTheta - sqrt2*Rerho110*sin2theta*cosphi - rho11m1*sinSqTheta*cos2phi);
   Double_t W2 = (3.0 / 4.0*TMath::Pi()) * (sqrt2*Imrho210*sin2theta*sinphi + Imrho21m1*sinSqTheta*sin2phi);
   
   Double_t W = W0 - mcpolState*mcpol*cos2PHI*W1 - mcpolState*mcpol*sin2PHI*W2;
   
   return W;   
}


